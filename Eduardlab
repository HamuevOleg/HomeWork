#include <iostream>
#include <vector>
#include <algorithm>
#include <stdexcept>
#include <initializer_list> // для push_range

class Stack {
private:
    std::vector<int> data;

public:
    // Конструкторы
    Stack() = default;

    explicit Stack(size_t size) : data(size, 0) {}

    Stack(int* arr, size_t size) : data(arr, arr + size) {}

    Stack(const Stack& other) : data(other.data) {}

    Stack(Stack&& other) noexcept : data(std::move(other.data)) {}

    // Операторы
    Stack& operator=(const Stack& other) {
        if (this != &other) {
            data = other.data;
        }
        return *this;
    }

    Stack& operator=(Stack&& other) noexcept {
        if (this != &other) {
            data = std::move(other.data);
        }
        return *this;
    }

    // Деструктор
    ~Stack() {
        clear();
    }

    // Методы

    void clear() {
        data.clear();
    }

    void push(int value) {
        data.push_back(value);
    }

    void push_range(const std::initializer_list<int>& values) {
        data.insert(data.end(), values.begin(), values.end());
    }

    void emplace(int&& args) {
        data.emplace_back(std::forward<int>(args));
    }

    void pop() {
        if (!data.empty()) {
            data.pop_back();
        } else {
            throw std::out_of_range("Stack is empty");
        }
    }

    int top() const {
        if (!data.empty()) {
            return data.back();
        } else {
            throw std::out_of_range("Stack is empty");
        }
    }

    void swap(Stack& other) noexcept {
        data.swap(other.data);
    }

    size_t size() const {
        return data.size();
    }

    bool empty() const {
        return data.empty();
    }

    int at(int index) const {
        if (data.empty()) {
            throw std::out_of_range("Stack is empty");
        }
        int actual_index = index < 0 ? data.size() + index : index;
        if (actual_index < 0) {
            return data.front();
        } else if (actual_index >= static_cast<int>(data.size())) {
            return data.back();
        }
        return data[actual_index];
    }

    void resize(size_t newSize) {
        data.resize(newSize, 0);
    }

    void assign(size_t count, int value) {
        data.assign(count, value);
    }

    size_t length() const {
        return data.size();
    }

    void print() const {
        for (const int& item : data) {
            std::cout << item << " ";
        }
        std::cout << std::endl;
    }

    bool operator==(const Stack& other) const {
        return data == other.data;
    }

    bool operator!=(const Stack& other) const {
        return !(*this == other);
    }

    bool operator<(const Stack& other) const {
        return data < other.data;
    }

    bool operator<=(const Stack& other) const {
        return data <= other.data;
    }

    bool operator>(const Stack& other) const {
        return data > other.data;
    }

    bool operator>=(const Stack& other) const {
        return data >= other.data;
    }

    int operator[](size_t pos) const {
        return data[pos];
    }

    int& operator[](size_t pos) {
        return data[pos];
    }

    friend std::istream& operator>>(std::istream& is, Stack& stack) {
        size_t n;
        is >> n;
        stack.data.resize(n);
        for (size_t i = 0; i < n; ++i) {
            is >> stack.data[i];
        }
        return is;
    }

    friend std::ostream& operator<<(std::ostream& os, const Stack& stack) {
        for (const int& item : stack.data) {
            os << item << " ";
        }
        return os;
    }

    size_t count(int value) const {
        return std::count(data.begin(), data.end(), value);
    }

    bool contains(int value) const {
        return std::find(data.begin(), data.end(), value) != data.end();
    }

    static bool is_equal(const Stack& stack1, const Stack& stack2) {
        return stack1.data == stack2.data;
    }


    // Итератор
public:
    class Iterator {
    private:
        typename std::vector<int>::iterator it;
        typename std::vector<int>::reverse_iterator rit; // Для reverse итераторов

    public:
        // Конструктор для обычных итераторов
        Iterator(typename std::vector<int>::iterator iter) : it(iter), rit() {}

        // Конструктор для reverse итераторов
        Iterator(typename std::vector<int>::reverse_iterator iter) : rit(iter), it() {}

        // Операторы разыменовывания для итератора
        int& operator*() {
            if (it != typename std::vector<int>::iterator()) {
                return *it;
            } else {
                return *rit;
            }
        }

        const int& operator*() const {
            if (it != typename std::vector<int>::iterator()) {
                return *it;
            } else {
                return *rit;
            }
        }

        // Операторы инкремента для обычных итераторов
        Iterator& operator++() {
            ++it;
            return *this;
        }

        Iterator operator++(int) {
            Iterator tmp = *this;
            ++(*this);
            return tmp;
        }

        // Операторы инкремента для reverse итераторов
        Iterator& operator--() {
            --rit;
            return *this;
        }

        Iterator operator--(int) {
            Iterator tmp = *this;
            --(*this);
            return tmp;
        }

        // Операторы сравнения
        bool operator==(const Iterator& other) const {
            return it == other.it || rit == other.rit;
        }

        bool operator!=(const Iterator& other) const {
            return !(*this == other);
        }

        // Базовый итератор для использования внутри других методов
        typename std::vector<int>::iterator base() {
            return it;
        }

        typename std::vector<int>::reverse_iterator base_r() {
            return rit;
        }
    };

    // Методы для begin(), end(), rbegin(), rend()
    Iterator begin() {
        return Iterator(data.begin());
    }

    Iterator end() {
        return Iterator(data.end());
    }

    Iterator rbegin() {
        return Iterator(data.rbegin());  // Возвращаем reverse итератор
    }

    Iterator rend() {
        return Iterator(data.rend());    // Возвращаем reverse итератор
    }
};

int main() {
    Stack stack1;
    stack1.push(1);
    stack1.push(2);
    stack1.push(3);
    stack1.push(4);

    for (auto it = stack1.begin(); it != stack1.end(); ++it) {
        std::cout << *it << " ";
    }
    std::cout << std::endl;

    stack1.push_range({5, 6});
    stack1.print();

    stack1.emplace(7);
    stack1.print();

    Stack stack2;
    stack2.push_range({1, 2, 3, 4, 5, 6, 7});
    std::cout << "Stacks are equal: " << (Stack::is_equal(stack1, stack2) ? "Yes" : "No") << std::endl;

    return 0;
}
